/* This file was generated by SableCC (http://www.sablecc.org/). */

package legacy.commons.calculator.analysis;

import java.util.Hashtable;

import legacy.commons.calculator.node.ACplxTerm;
import legacy.commons.calculator.node.AExpression;
import legacy.commons.calculator.node.ALterm;
import legacy.commons.calculator.node.AMain;
import legacy.commons.calculator.node.AMinusOp;
import legacy.commons.calculator.node.APlusOp;
import legacy.commons.calculator.node.AReal;
import legacy.commons.calculator.node.ARealPart;
import legacy.commons.calculator.node.ARterm;
import legacy.commons.calculator.node.ASlashOp;
import legacy.commons.calculator.node.ASmplTerm;
import legacy.commons.calculator.node.AStarOp;
import legacy.commons.calculator.node.EOF;
import legacy.commons.calculator.node.Node;
import legacy.commons.calculator.node.Start;
import legacy.commons.calculator.node.TBlank;
import legacy.commons.calculator.node.TDot;
import legacy.commons.calculator.node.TMinus;
import legacy.commons.calculator.node.TNum;
import legacy.commons.calculator.node.TPlus;
import legacy.commons.calculator.node.TRcb;
import legacy.commons.calculator.node.TRob;
import legacy.commons.calculator.node.TSlash;
import legacy.commons.calculator.node.TStar;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAMain(AMain node)
    {
        defaultCase(node);
    }

    public void caseAExpression(AExpression node)
    {
        defaultCase(node);
    }

    public void caseALterm(ALterm node)
    {
        defaultCase(node);
    }

    public void caseARterm(ARterm node)
    {
        defaultCase(node);
    }

    public void caseACplxTerm(ACplxTerm node)
    {
        defaultCase(node);
    }

    public void caseASmplTerm(ASmplTerm node)
    {
        defaultCase(node);
    }

    public void caseAPlusOp(APlusOp node)
    {
        defaultCase(node);
    }

    public void caseAMinusOp(AMinusOp node)
    {
        defaultCase(node);
    }

    public void caseAStarOp(AStarOp node)
    {
        defaultCase(node);
    }

    public void caseASlashOp(ASlashOp node)
    {
        defaultCase(node);
    }

    public void caseAReal(AReal node)
    {
        defaultCase(node);
    }

    public void caseARealPart(ARealPart node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTRob(TRob node)
    {
        defaultCase(node);
    }

    public void caseTRcb(TRcb node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTNum(TNum node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
