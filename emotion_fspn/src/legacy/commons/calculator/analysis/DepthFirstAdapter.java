/* This file was generated by SableCC (http://www.sablecc.org/). */

package legacy.commons.calculator.analysis;

import legacy.commons.calculator.node.ACplxTerm;
import legacy.commons.calculator.node.AExpression;
import legacy.commons.calculator.node.ALterm;
import legacy.commons.calculator.node.AMain;
import legacy.commons.calculator.node.AMinusOp;
import legacy.commons.calculator.node.APlusOp;
import legacy.commons.calculator.node.AReal;
import legacy.commons.calculator.node.ARealPart;
import legacy.commons.calculator.node.ARterm;
import legacy.commons.calculator.node.ASlashOp;
import legacy.commons.calculator.node.ASmplTerm;
import legacy.commons.calculator.node.AStarOp;
import legacy.commons.calculator.node.Node;
import legacy.commons.calculator.node.Start;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPMain().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAMain(AMain node)
    {
        defaultIn(node);
    }

    public void outAMain(AMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMain(AMain node)
    {
        inAMain(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMain(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getRob() != null)
        {
            node.getRob().apply(this);
        }
        if(node.getLterm() != null)
        {
            node.getLterm().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getRterm() != null)
        {
            node.getRterm().apply(this);
        }
        if(node.getRcb() != null)
        {
            node.getRcb().apply(this);
        }
        outAExpression(node);
    }

    public void inALterm(ALterm node)
    {
        defaultIn(node);
    }

    public void outALterm(ALterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALterm(ALterm node)
    {
        inALterm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outALterm(node);
    }

    public void inARterm(ARterm node)
    {
        defaultIn(node);
    }

    public void outARterm(ARterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARterm(ARterm node)
    {
        inARterm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outARterm(node);
    }

    public void inACplxTerm(ACplxTerm node)
    {
        defaultIn(node);
    }

    public void outACplxTerm(ACplxTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACplxTerm(ACplxTerm node)
    {
        inACplxTerm(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACplxTerm(node);
    }

    public void inASmplTerm(ASmplTerm node)
    {
        defaultIn(node);
    }

    public void outASmplTerm(ASmplTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASmplTerm(ASmplTerm node)
    {
        inASmplTerm(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outASmplTerm(node);
    }

    public void inAPlusOp(APlusOp node)
    {
        defaultIn(node);
    }

    public void outAPlusOp(APlusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOp(APlusOp node)
    {
        inAPlusOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOp(node);
    }

    public void inAMinusOp(AMinusOp node)
    {
        defaultIn(node);
    }

    public void outAMinusOp(AMinusOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOp(AMinusOp node)
    {
        inAMinusOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOp(node);
    }

    public void inAStarOp(AStarOp node)
    {
        defaultIn(node);
    }

    public void outAStarOp(AStarOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarOp(AStarOp node)
    {
        inAStarOp(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarOp(node);
    }

    public void inASlashOp(ASlashOp node)
    {
        defaultIn(node);
    }

    public void outASlashOp(ASlashOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashOp(ASlashOp node)
    {
        inASlashOp(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outASlashOp(node);
    }

    public void inAReal(AReal node)
    {
        defaultIn(node);
    }

    public void outAReal(AReal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReal(AReal node)
    {
        inAReal(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getRealPart() != null)
        {
            node.getRealPart().apply(this);
        }
        outAReal(node);
    }

    public void inARealPart(ARealPart node)
    {
        defaultIn(node);
    }

    public void outARealPart(ARealPart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealPart(ARealPart node)
    {
        inARealPart(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outARealPart(node);
    }
}
