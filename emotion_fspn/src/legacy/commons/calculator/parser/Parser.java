/* This file was generated by SableCC (http://www.sablecc.org/). */

package legacy.commons.calculator.parser;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import legacy.commons.calculator.analysis.Analysis;
import legacy.commons.calculator.analysis.AnalysisAdapter;
import legacy.commons.calculator.lexer.Lexer;
import legacy.commons.calculator.lexer.LexerException;
import legacy.commons.calculator.node.ACplxTerm;
import legacy.commons.calculator.node.AExpression;
import legacy.commons.calculator.node.ALterm;
import legacy.commons.calculator.node.AMain;
import legacy.commons.calculator.node.AMinusOp;
import legacy.commons.calculator.node.APlusOp;
import legacy.commons.calculator.node.AReal;
import legacy.commons.calculator.node.ARealPart;
import legacy.commons.calculator.node.ARterm;
import legacy.commons.calculator.node.ASlashOp;
import legacy.commons.calculator.node.ASmplTerm;
import legacy.commons.calculator.node.AStarOp;
import legacy.commons.calculator.node.EOF;
import legacy.commons.calculator.node.Node;
import legacy.commons.calculator.node.PExpression;
import legacy.commons.calculator.node.PLterm;
import legacy.commons.calculator.node.PMain;
import legacy.commons.calculator.node.POp;
import legacy.commons.calculator.node.PReal;
import legacy.commons.calculator.node.PRealPart;
import legacy.commons.calculator.node.PRterm;
import legacy.commons.calculator.node.PTerm;
import legacy.commons.calculator.node.Start;
import legacy.commons.calculator.node.Switchable;
import legacy.commons.calculator.node.TDot;
import legacy.commons.calculator.node.TMinus;
import legacy.commons.calculator.node.TNum;
import legacy.commons.calculator.node.TPlus;
import legacy.commons.calculator.node.TRcb;
import legacy.commons.calculator.node.TRob;
import legacy.commons.calculator.node.TSlash;
import legacy.commons.calculator.node.TStar;
import legacy.commons.calculator.node.Token;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AMain */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AExpression */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce ALterm */
		    {
			ArrayList list = new2();
			push(goTo(2), list, false);
		    }
		    break;
                    case 3: /* reduce ARterm */
		    {
			ArrayList list = new3();
			push(goTo(3), list, false);
		    }
		    break;
                    case 4: /* reduce ACplxTerm */
		    {
			ArrayList list = new4();
			push(goTo(4), list, false);
		    }
		    break;
                    case 5: /* reduce ASmplTerm */
		    {
			ArrayList list = new5();
			push(goTo(4), list, false);
		    }
		    break;
                    case 6: /* reduce APlusOp */
		    {
			ArrayList list = new6();
			push(goTo(5), list, false);
		    }
		    break;
                    case 7: /* reduce AMinusOp */
		    {
			ArrayList list = new7();
			push(goTo(5), list, false);
		    }
		    break;
                    case 8: /* reduce AStarOp */
		    {
			ArrayList list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce ASlashOp */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AAreal1Real */
		    {
			ArrayList list = new10();
			push(goTo(6), list, false);
		    }
		    break;
                    case 11: /* reduce AAreal2Real */
		    {
			ArrayList list = new11();
			push(goTo(6), list, false);
		    }
		    break;
                    case 12: /* reduce ARealPart */
		    {
			ArrayList list = new12();
			push(goTo(7), list, false);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PMain node1 = (PMain) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AMain */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMain pmainNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pmainNode1 = new AMain(pexpressionNode2);
        }
	nodeList.add(pmainNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TRob trobNode2;
        PLterm pltermNode3;
        POp popNode4;
        PRterm prtermNode5;
        TRcb trcbNode6;
        trobNode2 = (TRob)nodeArrayList1.get(0);
        pltermNode3 = (PLterm)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);
        prtermNode5 = (PRterm)nodeArrayList4.get(0);
        trcbNode6 = (TRcb)nodeArrayList5.get(0);

        pexpressionNode1 = new AExpression(trobNode2, pltermNode3, popNode4, prtermNode5, trcbNode6);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ALterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLterm pltermNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pltermNode1 = new ALterm(ptermNode2);
        }
	nodeList.add(pltermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ARterm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRterm prtermNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        prtermNode1 = new ARterm(ptermNode2);
        }
	nodeList.add(prtermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ACplxTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        ptermNode1 = new ACplxTerm(pexpressionNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASmplTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PReal prealNode2;
        prealNode2 = (PReal)nodeArrayList1.get(0);

        ptermNode1 = new ASmplTerm(prealNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce APlusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        popNode1 = new APlusOp(tplusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AMinusOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        popNode1 = new AMinusOp(tminusNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AStarOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        popNode1 = new AStarOp(tstarNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ASlashOp */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        popNode1 = new ASlashOp(tslashNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAreal1Real */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReal prealNode1;
        {
            // Block
        TNum tnumNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        prealNode1 = new AReal(tnumNode2, null);
        }
	nodeList.add(prealNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAreal2Real */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PReal prealNode1;
        {
            // Block
        TNum tnumNode2;
        PRealPart prealpartNode3;
        tnumNode2 = (TNum)nodeArrayList1.get(0);
        prealpartNode3 = (PRealPart)nodeArrayList2.get(0);

        prealNode1 = new AReal(tnumNode2, prealpartNode3);
        }
	nodeList.add(prealNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ARealPart */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRealPart prealpartNode1;
        {
            // Block
        TDot tdotNode2;
        TNum tnumNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tnumNode3 = (TNum)nodeArrayList2.get(0);

        prealpartNode1 = new ARealPart(tdotNode2, tnumNode3);
        }
	nodeList.add(prealpartNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {0, SHIFT, 1}, {6, SHIFT, 4}, },
			{{-1, ERROR, 2}, {8, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 10}, {7, SHIFT, 9}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 6}, {2, SHIFT, 11}, {3, SHIFT, 12}, {4, SHIFT, 13}, {5, SHIFT, 14}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 9}, {6, SHIFT, 16}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 15}, {0, SHIFT, 1}, {6, SHIFT, 4}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 17}, {1, SHIFT, 19}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, {0, 3}, },
			{{-1, 6}, },
			{{-1, 17}, },
			{{-1, 7}, {15, 18}, },
			{{-1, 15}, },
			{{-1, 8}, },
			{{-1, 10}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '('",
			"expecting: '(', num",
			"expecting: EOF",
			"expecting: ')', '+', '-', '*', '/', '.'",
			"expecting: ')', '+', '-', '*', '/'",
			"expecting: '+', '-', '*', '/'",
			"expecting: num",
			"expecting: ')'",
			"expecting: ')', '+', '-', '*', '/', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 5, 4, 6, 4, 1, 1, 1, 1, 1, 4, 7, 7, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
