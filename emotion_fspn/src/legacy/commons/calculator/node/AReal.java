/* This file was generated by SableCC (http://www.sablecc.org/). */

package legacy.commons.calculator.node;

import legacy.commons.calculator.analysis.Analysis;

@SuppressWarnings("nls")
public final class AReal extends PReal
{
    private TNum _num_;
    private PRealPart _realPart_;

    public AReal()
    {
        // Constructor
    }

    public AReal(
        @SuppressWarnings("hiding") TNum _num_,
        @SuppressWarnings("hiding") PRealPart _realPart_)
    {
        // Constructor
        setNum(_num_);

        setRealPart(_realPart_);

    }

    @Override
    public Object clone()
    {
        return new AReal(
            cloneNode(this._num_),
            cloneNode(this._realPart_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAReal(this);
    }

    public TNum getNum()
    {
        return this._num_;
    }

    public void setNum(TNum node)
    {
        if(this._num_ != null)
        {
            this._num_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._num_ = node;
    }

    public PRealPart getRealPart()
    {
        return this._realPart_;
    }

    public void setRealPart(PRealPart node)
    {
        if(this._realPart_ != null)
        {
            this._realPart_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._realPart_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._num_)
            + toString(this._realPart_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._num_ == child)
        {
            this._num_ = null;
            return;
        }

        if(this._realPart_ == child)
        {
            this._realPart_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._num_ == oldChild)
        {
            setNum((TNum) newChild);
            return;
        }

        if(this._realPart_ == oldChild)
        {
            setRealPart((PRealPart) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
