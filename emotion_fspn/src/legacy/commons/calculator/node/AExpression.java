/* This file was generated by SableCC (http://www.sablecc.org/). */

package legacy.commons.calculator.node;

import legacy.commons.calculator.analysis.Analysis;

@SuppressWarnings("nls")
public final class AExpression extends PExpression
{
    private TRob _rob_;
    private PLterm _lterm_;
    private POp _op_;
    private PRterm _rterm_;
    private TRcb _rcb_;

    public AExpression()
    {
        // Constructor
    }

    public AExpression(
        @SuppressWarnings("hiding") TRob _rob_,
        @SuppressWarnings("hiding") PLterm _lterm_,
        @SuppressWarnings("hiding") POp _op_,
        @SuppressWarnings("hiding") PRterm _rterm_,
        @SuppressWarnings("hiding") TRcb _rcb_)
    {
        // Constructor
        setRob(_rob_);

        setLterm(_lterm_);

        setOp(_op_);

        setRterm(_rterm_);

        setRcb(_rcb_);

    }

    @Override
    public Object clone()
    {
        return new AExpression(
            cloneNode(this._rob_),
            cloneNode(this._lterm_),
            cloneNode(this._op_),
            cloneNode(this._rterm_),
            cloneNode(this._rcb_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpression(this);
    }

    public TRob getRob()
    {
        return this._rob_;
    }

    public void setRob(TRob node)
    {
        if(this._rob_ != null)
        {
            this._rob_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rob_ = node;
    }

    public PLterm getLterm()
    {
        return this._lterm_;
    }

    public void setLterm(PLterm node)
    {
        if(this._lterm_ != null)
        {
            this._lterm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lterm_ = node;
    }

    public POp getOp()
    {
        return this._op_;
    }

    public void setOp(POp node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    public PRterm getRterm()
    {
        return this._rterm_;
    }

    public void setRterm(PRterm node)
    {
        if(this._rterm_ != null)
        {
            this._rterm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rterm_ = node;
    }

    public TRcb getRcb()
    {
        return this._rcb_;
    }

    public void setRcb(TRcb node)
    {
        if(this._rcb_ != null)
        {
            this._rcb_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcb_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rob_)
            + toString(this._lterm_)
            + toString(this._op_)
            + toString(this._rterm_)
            + toString(this._rcb_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rob_ == child)
        {
            this._rob_ = null;
            return;
        }

        if(this._lterm_ == child)
        {
            this._lterm_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        if(this._rterm_ == child)
        {
            this._rterm_ = null;
            return;
        }

        if(this._rcb_ == child)
        {
            this._rcb_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rob_ == oldChild)
        {
            setRob((TRob) newChild);
            return;
        }

        if(this._lterm_ == oldChild)
        {
            setLterm((PLterm) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((POp) newChild);
            return;
        }

        if(this._rterm_ == oldChild)
        {
            setRterm((PRterm) newChild);
            return;
        }

        if(this._rcb_ == oldChild)
        {
            setRcb((TRcb) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
